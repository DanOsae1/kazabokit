name: Build Docker Image and Deploy to Cloud Run

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:
env:
  project_id: kazabokit
  SERVICE_NAME: kazabokit-web
  REGION: europe-west2
  DOCKER_REPO: ${{ secrets.DOCKERHUB_REPO }}
  DOCKER_TAG: ${{ github.event.inputs.docker_tag || 'latest' }}
jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        # Only run this step when pushing to main branch
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kazabokit:latest
          Optional: Add build arguments if needed
          build-args: |
            VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
            VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
            VITE_EMAILJS_PUBLICKEY=${{ secrets.VITE_EMAILJS_PUBLICKEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Pull and push Docker image to GCR
        run: |
          # Authenticate with Docker repository if needed
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Pull image from Docker repository
          docker pull ${DOCKER_REPO}:${DOCKER_TAG}

          # Configure Docker to use gcloud as a credential helper
          gcloud auth configure-docker gcr.io

          # Tag and push to Google Container Registry
          docker tag ${DOCKER_REPO}:${DOCKER_TAG} gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${DOCKER_TAG}
          docker push gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${DOCKER_TAG}

          # Also tag as latest if it's not already the tag
          if [ "${DOCKER_TAG}" != "latest" ]; then
            docker tag ${DOCKER_REPO}:${DOCKER_TAG} gcr.io/${PROJECT_ID}/${SERVICE_NAME}:latest
            docker push gcr.io/${PROJECT_ID}/${SERVICE_NAME}:latest
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.3

      - name: Terraform Init
        run: |
          terraform init
        working-directory: ./infrastrcture
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.access_token }}

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="project_id=${PROJECT_ID}" \
            -var="region=${REGION}" \
            -var="image_tag=${DOCKER_TAG}" \
            -out=tfplan
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.access_token }}

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.access_token }}
